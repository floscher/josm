<?xml version="1.0" encoding="utf-8"?>
<!-- ** build.xml - main ant file for JOSM
**
** To build run
**    ant clean
**    ant dist
** This will create 'josm-custom.jar'  in directory 'dist'. See also
**   https://josm.openstreetmap.de/wiki/CreateBuild
**
**
-->
<project xmlns:as="antlib:org.codehaus.mojo.animal_sniffer" name="josm" default="dist" basedir=".">
    <property name="test.dir" location="test"/>
    <property name="src.dir" location="src"/>
    <property name="build.dir" location="build"/>
    <property name="javacc.home" location="tools"/>
    <property name="mapcss.dir" location="${src.dir}/org/openstreetmap/josm/gui/mappaint/mapcss"/>
    <!-- build parameter: compression level (ant -Dclevel=N)
             N ranges from 0 (no compression) to 9 (maximum compression)
             default: 9 -->
    <condition property="clevel" value="${clevel}" else="9">
        <isset property="clevel"/>
    </condition>
    <!-- Java classpath addition (all jar files to compile tests with this) -->
    <path id="classpath">
        <fileset dir="lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!--
	  ** Used by Eclipse ant builder for updating
	  ** the REVISION file used by JOSM
	-->
    <target name="create-revision-eclipse">
        <property name="revision.dir" value="bin"/>
        <antcall target="create-revision"/>
    </target>
    <!--
	  ** Creates the REVISION file to be included in the distribution
	  -->
    <target name="create-revision">
        <property name="revision.dir" value="${build.dir}"/>
        <exec append="false" output="REVISION.XML" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION.XML" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION.XML"/>
        <tstamp>
            <format property="build.tstamp" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>
        <property name="version.entry.commit.revision" value="UNKNOWN"/>
        <mkdir dir="${revision.dir}"/>
        <!-- add Build-Name: ... when making special builds, e.g. DEBIAN -->
        <echo file="${revision.dir}/REVISION">
# automatically generated by JOSM build.xml - do not edit
Revision: ${version.entry.commit.revision}
Is-Local-Build: true
Build-Date: ${build.tstamp}
</echo>
    </target>
    <target name="dist" depends="compile,create-revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
        <property name="version.entry.commit.revision" value="UNKNOWN"/>
        <property name="version.entry.commit.date" value="UNKNOWN"/>
        <echo>Revision ${version.entry.commit.revision}</echo>
        <copy file="CONTRIBUTION" todir="build"/>
        <copy file="README" todir="build"/>
        <copy file="LICENSE" todir="build"/>
        <!-- create josm-custom.jar -->
        <delete file="dist/josm-custom.jar"/>
        <jar destfile="dist/josm-custom.jar" basedir="build" level="${clevel}">
            <!-- add attribute excludes="**/*BZip2*,**/*Bzip2*" to create a non-bzip2 supporting jar -->
            <manifest>
                <attribute name="Main-class" value="JOSM"/>
                <attribute name="Main-Version" value="${version.entry.commit.revision} SVN"/>
                <attribute name="Main-Date" value="${version.entry.commit.date}"/>
            </manifest>
            <zipfileset dir="images" prefix="images"/>
            <zipfileset dir="data" prefix="data"/>
            <zipfileset dir="styles" prefix="styles"/>
            <zipfileset dir="src/org/openstreetmap/gui/jmapviewer/images" prefix="org/openstreetmap/gui/jmapviewer/images"/>
            <!-- All jar files necessary to run only JOSM (no tests) -->
            <!-- <zipfileset src="lib/metadata-extractor-2.3.1-nosun.jar"/>  -->
            <!-- <zipfileset src="lib/signpost-core-1.2.1.1.jar"/> -->
        </jar>
    </target>
    <target name="distmac" depends="dist">
        <!-- modify MacOS X Info.plist file to hold the SVN version number -->
        <copy file="macosx/JOSM.app/Contents/Info.plist" todir="build"/>
        <replace file="build/Info.plist" token="@SVNVersion@" value="${version.entry.commit.revision}"/>
        <!-- create ZIP file with MacOS X application bundle -->
        <zip destfile="dist/josm-custom-macosx.zip" update="true">
            <zipfileset dir="build" includes="CONTRIBUTION README LICENSE"/>
            <zipfileset dir="macosx" includes="JOSM.app/Contents JOSM.app/Contents/MacOS JOSM.app/Contents/Resources JOSM.app/Contents/Resources/Java JOSM.app/Contents/PkgInfo JOSM.app/Contents/Resources/JOSM.icns"/>
            <zipfileset dir="build" includes="Info.plist" prefix="JOSM.app/Contents"/>
            <zipfileset dir="dist" includes="josm-custom.jar" prefix="JOSM.app/Contents/Resources/Java"/>
            <zipfileset dir="macosx" includes="JOSM.app/Contents/MacOS/JOSM" filemode="755"/>
        </zip>
    </target>
    <target name="javacc" depends="init" unless="javacc.notRequired">
        <mkdir dir="${mapcss.dir}/parsergen"/>
        <exec append="false" executable="java" failifexecutionfails="true">
            <arg value="-cp"/>
            <arg value="${javacc.home}/javacc.jar"/>
            <arg value="javacc"/>
            <arg value="-OUTPUT_DIRECTORY=${mapcss.dir}/parsergen"/>
            <arg value="${mapcss.dir}/MapCSSParser.jj"/>
        </exec>
<!--        <javacc target="${mapcss.dir}/MapCSSParser.jj" javacchome="${javacc.home}" outputdirectory="${mapcss.dir}/parsergen"/>-->
    </target>
    <target name="compile" depends="init,javacc">
        <javac srcdir="src" includes="com/**,oauth/**,org/apache/commons/codec/**" destdir="build" target="1.5" source="1.5" debug="on" encoding="iso-8859-1"/>
        <javac srcdir="src" excludes="com/**,oauth/**,org/apache/commons/codec/**" destdir="build" target="1.5" source="1.5" debug="on" encoding="UTF-8">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <target name="init">
        <uptodate property="javacc.notRequired" targetfile="${mapcss.dir}/parsergen/MapCSSParser.java" >
            <srcfiles dir="${mapcss.dir}" includes="MapCSSParser.jj"/>
        </uptodate>
        <mkdir dir="build"/>
        <mkdir dir="dist"/>
    </target>
    <target name="javadoc">
        <javadoc destdir="javadoc" 
                sourcepath="src"
                packagenames="org.openstreetmap.josm.*,org.openstreetmap.gui.jmapviewer.*"
                windowtitle="JOSM"
                use="true"
                private="true"
                linksource="true"
                author="false">
            <link href="http://docs.oracle.com/javase/6/docs/api"/>
            <doctitle><![CDATA[<h2>JOSM - Javadoc</h2>]]></doctitle>
            <bottom><![CDATA[<a href="http://josm.openstreetmap.de/">JOSM</a>]]></bottom>
        </javadoc>
    </target>
    <target name="clean">
        <delete dir="build"/>
        <delete dir="dist"/>
        <delete dir="${mapcss.dir}/parsergen"/>
    </target>
    <path id="test.classpath">
        <fileset dir="${test.dir}/lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="lib">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement path="dist/josm-custom.jar"/>
    </path>
    <target name="test-init">
        <mkdir dir="${test.dir}/${build.dir}"/>
        <mkdir dir="${test.dir}/report"/>
    </target>
    <target name="test-clean">
        <delete dir="${test.dir}/${build.dir}"/>
        <delete dir="${test.dir}/report"/>
    </target>
    <target name="test-compile" depends="test-init,dist">
        <javac srcdir="${test.dir}/unit" classpathref="test.classpath" destdir="${test.dir}/${build.dir}" target="1.5" source="1.5" debug="on" encoding="UTF-8">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
        <javac srcdir="${test.dir}/functional" classpathref="test.classpath" destdir="${test.dir}/${build.dir}" target="1.5" source="1.5" debug="on" encoding="UTF-8">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <target name="test" depends="test-compile">
        <junit printsummary="yes">
            <sysproperty key="josm.home" value="${test.dir}/config/unit-josm.home"/>
            <sysproperty key="java.awt.headless" value="true"/>
	    <sysproperty key="suppressPermanentFailure" value="${suppressPermanentFailure}"/>
            <classpath>
                <path refid="test.classpath"/>
                <pathelement path="${test.dir}/${build.dir}"/>
                <pathelement path="${test.dir}/config"/>
            </classpath>
            <formatter type="plain"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${test.dir}/report">
                <fileset dir="${test.dir}/unit" includes="**/*.java"/>
            </batchtest>
        </junit>
    </target>
    <target name="test-html" depends="test" description="Generate HTML test reports">
        <!-- May require additional ant dependencies like ant-trax package -->
        <junitreport todir="${test.dir}/report">
            <fileset dir="${test.dir}/report">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${test.dir}/report/html"/>
        </junitreport>
    </target>
    <target name="dist-optimized" depends="dist">
        <taskdef resource="proguard/ant/task.properties" classpath="tools/proguard.jar"/>
        <proguard>
	 	-injars dist/josm-custom.jar
	 	-outjars dist/josm-custom-optimized.jar

	 	-libraryjars ${java.home}/lib/rt.jar
	 	-libraryjars ${java.home}/lib/jce.jar

	 	-dontoptimize
	 	-dontobfuscate

	 	# These options probably are not necessary (and make processing a bit slower)
	 	-dontskipnonpubliclibraryclasses
		-dontskipnonpubliclibraryclassmembers

	 	-keepclasseswithmembers public class org.openstreetmap.josm.gui.MainApplication {
	 	    public static void main(java.lang.String[]);
	 	}
		-keepclasseswithmembers public class org.openstreetmap.josm.gui.MainApplet

		-keep class JOSM
	 	-keep class * extends org.openstreetmap.josm.io.FileImporter
	 	-keep class * extends org.openstreetmap.josm.io.FileExporter
		-keep class org.openstreetmap.josm.data.imagery.types.Adapter1
		-keep class org.openstreetmap.josm.actions.search.SearchCompiler$Never

	 	-keepclassmembers enum  * {
	 	    public static **[] values();
	 	    public static ** valueOf(java.lang.String);
	 	}

	 	# Keep unused public methods (can be useful for plugins)
	 	-keepclassmembers class * {
	 	    public protected *;
	 	}

		# Disable annoying [proguard] Note: the configuration keeps the entry point '...', but not the descriptor class '...'. This notes should not be a problem as we don't use obfuscation
		-dontnote
		</proguard>
    </target>
    <target name="check-plugins" depends="dist-optimized">
        <echo message="Check of plugins binary compatibility (needs ant 1.8)"/>
        <local name="dir"/>
        <local name="plugins"/>
        <property name="dir" value="plugin-check"/>
        <typedef uri="antlib:org.codehaus.mojo.animal_sniffer">
            <classpath path="tools/animal-sniffer-ant-tasks-1.7.jar"/>
        </typedef>
        <delete dir="${dir}"/>
        <mkdir dir="${dir}"/>
        <as:build-signatures destfile="${dir}/api.sig">
            <path>
                <fileset file="dist/josm-custom-optimized.jar"/>
                <fileset file="${java.home}/lib/rt.jar"/>
                <fileset file="${java.home}/lib/jce.jar"/>
            </path>
        </as:build-signatures>
        <!-- List of deprecated plugins -->
        <loadfile property="deprecated-plugins" srcFile="src/org/openstreetmap/josm/plugins/PluginHandler.java">
            <filterchain>
                <linecontains>
                    <contains value="new DeprecatedPlugin("/>
                </linecontains>
                <tokenfilter>
                    <replaceregex pattern=".*new DeprecatedPlugin\(&quot;(.+?)&quot;.*" replace="\1|" flags="gi"/>
                </tokenfilter>
                <striplinebreaks/>
                <tokenfilter>
                    <replaceregex pattern="\|$" replace="" flags="gi"/>
                </tokenfilter>
            </filterchain>
        </loadfile>
        <!-- Download plugins -->
        <loadresource property="plugins">
            <url url="http://josm.openstreetmap.de/plugin"/>
            <filterchain>
                <linecontainsregexp negate="true">
                    <regexp pattern="^\t.*"/>
                </linecontainsregexp>
                <linecontainsregexp negate="true">
                    <regexp pattern="${deprecated-plugins}"/>
                </linecontainsregexp>
                <tokenfilter>
                    <replaceregex pattern="^.*;" replace="" flags="gi"/>
                </tokenfilter>
            </filterchain>
        </loadresource>
        <copy todir="${dir}" flatten="true">
            <resourcelist>
                <string value="${plugins}"/>
            </resourcelist>
        </copy>
        <!-- Check plugins -->
        <as:check-signature signature="${dir}/api.sig">
            <ignore classname="org.jgraph.*"/>
            <ignore classname="com.touchgraph.*"/>
            <ignore classname="com.sun.xml.fastinfoset.*"/>
            <ignore classname="javax.jms.*"/>
            <ignore classname="org.jvnet.staxex.*"/>
            <ignore classname="javax.mail.*"/>
            <ignore classname="com.sun.jdmk.*"/>
            <ignore classname="org.apache.avalon.framework.logger.Logger"/>
            <ignore classname="org.apache.log.*"/>
            <ignore classname="junit.*"/>
            <path path="${dir}"/>
        </as:check-signature>
    </target>

    <target name="findbugs" depends="dist">
    	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="tools/findbugs/findbugs-ant.jar"/>
        <path id="findbugs-classpath">
            <fileset dir="tools/findbugs/">
                <include name="*.jar"/>
            </fileset>
        </path>
    	<property name="findbugs-classpath" refid="findbugs-classpath"/>
      <findbugs output="xml"
                outputFile="findbugs-josm.xml"
      	        classpath="${findbugs-classpath}"
      	        pluginList=""
      	        excludeFilter="tools/findbugs/josm-filter.xml"
      	        effort="max"
      	        >
        <sourcePath path="${basedir}/src" />
        <class location="${basedir}/dist/josm-custom.jar" />
      </findbugs>
    </target>
    <target name="run" depends="dist">
        <java jar="dist/josm-custom.jar" fork="true">
            <arg value="--set=expert=true"/>
            <arg value="--set=remotecontrol.enabled=true"/>
            <arg value="--set=debug.edt-checker.enable=false"/>
            <jvmarg value="-Djosm.home=/tmp/.josm/"/>
        </java>
    </target>

</project>
