way[highway][name =~ /(?i).* (Ave|Blvd|Br|Brg|Cct|Cir|Cl|Cr|Crct|Cres|Crt|Ct|Dr|Drv|Esp|Espl|Hwy|Ln|Mw|Mwy|Pl|Rd|Qy|Qys|Sq|St|Str|Ter|Tce|Tr|Wy)[.]?$/] {
  throwWarning: tr("abbreviated street name");
  assertMatch: "way highway=unclassified name=\"Foo Ave\"";
  assertMatch: "way highway=unclassified name=\"Foo Ave.\"";
  assertMatch: "way highway=unclassified name=\"Bou Blvd.\"";
  assertMatch: "way highway=unclassified name=\"Bou blvd.\"";
}

node[highway =~ /motorway|trunk|primary|secondary|tertiary|unclassified|residential|service|living_street|pedestrian|track|path|footway/][highway!=motorway_junction][highway!=services] {
  throwWarning: tr("wrong highway tag on a node");
  assertMatch: "node highway=primary";
  assertMatch: "node highway=primary_link";
  assertNoMatch: "node highway=traffic_calming";
  assertNoMatch: "node highway=bus_stop";
  assertNoMatch: "node highway=crossing";
  assertNoMatch: "node highway=emergency_access_point";
  assertNoMatch: "node highway=give_way";
  assertNoMatch: "node highway=mini_roundabout";
  assertNoMatch: "node highway=motorway_junction";
  assertNoMatch: "node highway=passing_place";
  assertNoMatch: "node highway=rest_area";
  assertNoMatch: "node highway=speed_camera";
  assertNoMatch: "node highway=street_lamp";
  assertNoMatch: "node highway=services";
  assertNoMatch: "node highway=stop";
  assertNoMatch: "node highway=traffic_signals";
  assertNoMatch: "node highway=turning_circle";
}

way[highway=crossing], way[railway=crossing] {
  throwWarning: tr("wrong crossing tag on a way");
  assertMatch: "way highway=crossing";
  assertNoMatch: "node highway=crossing";
}

way[highway=unclassified][!name] {
  throwOther: tr("Unnamed unclassified highway");
  assertMatch: "way highway=unclassified";
  assertNoMatch: "way highway=unclassified name=Foo";
}

way[highway =~ /motorway|trunk|primary|secondary|tertiary/][!ref] {
  throwOther: tr("highway without a reference");
  assertMatch: "way highway=primary";
  assertNoMatch: "way highway=primary ref=123";
}

way[foot][highway =~ /motorway|trunk|primary|secondary|tertiary/] {
  throwWarning: tr("{0} used with {1}", "{0.key}", "{1.tag}");
  suggestAlternative: "sidewalk";
  suggestAlternative: "separate footway";
  assertMatch: "way highway=primary foot=yes";
  assertNoMatch: "way highway=primary";
}

way[highway=road] {
  throwWarning: tr("temporary highway type");
  assertMatch: "way highway=road";
  assertNoMatch: "way highway=residential";
}

way[highway=footway][maxspeed],
way[highway=steps][maxspeed],
way[highway=cycleway][bicycle?!],
way[highway=footway][foot?!],
way[highway=cycleway][cycleway=lane] {
  throwWarning: tr("{0} used with {1}", "{0.value}", "{1.tag}");
  assertMatch: "way highway=cycleway bicycle=false";
  assertMatch: "way highway=cycleway bicycle=0";
  assertNoMatch: "way highway=cycleway bicycle=yes";
  assertNoMatch: "way highway=cycleway";
  assertMatch: "way highway=footway foot=false";
  assertMatch: "way highway=footway foot=0";
  assertNoMatch: "way highway=footway foot=yes";
  assertNoMatch: "way highway=footway";
  assertMatch: "way highway=cycleway cycleway=lane";
  assertNoMatch: "way highway=cycleway";
  assertNoMatch: "way highway=residential cycleway=lane";
  assertMatch: "way highway=footway maxspeed=20";
  assertNoMatch: "way highway=residential maxspeed=20";
  assertNoMatch: "way highway=footway";
}

*[name =~ /(?i).*Strasse.*/] {
  throwWarning: tr("street name contains ss");
  assertMatch: "way name=Foobarstrasse";
  assertMatch: "way name=Foobar-Strassenweg";
  assertNoMatch: "way name=Foobarstra√üe";
}
